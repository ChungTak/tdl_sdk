#ifndef FACE_DDFA_HPP_
#define FACE_DDFA_HPP_
#include "framework/base_model.hpp"
#include "face/face_common.hpp"

class FaceDDFA : public BaseModel {
 public:
  FaceDDFA(const stNetParam& param){net_param_ = param;}

  ~FaceDDFA() {}

  bmStatus_t setup();
  bmStatus_t detect(const std::vector<cv::Mat>& image, std::vector<std::vector<FaceRect>>& faceRects);

private:
  bmStatus_t postprocess(std::vector<cv::Mat>::const_iterator& img_iter, std::vector<FacePose>& poses);
  void crop(const cv::Mat& ori_image, const std::vector<FaceRect>& rects, std::vector<cv::Mat>& crop_faces);
  void parse_pose(const float* output_data, const int len, FacePose& pose);

  std::vector<float> param_mean_
      {0.0003160176274832338, -1.804141220418387e-06, -1.7980439679377014e-06, 60.681392669677734, 2.55133591053891e-06,
       0.00043469181400723755, -3.382993600098416e-05, 69.36085510253906, 2.3277052605408244e-06,
       4.9046164349419996e-05, 0.00040402155718766153, -76.64856719970703, -304704.8125, 37490.0703125, 19555.88671875,
       -67357.71875, 21689.62109375, -68764.1328125, -4528.8486328125, -6817.701171875, -79785.6015625,
       6950.41455078125, -28004.857421875, 32310.728515625, -14112.0986328125, -7048.662109375, -21386.859375,
       12894.2392578125, -5944.02783203125, 2517.44091796875, -14573.3134765625, 5738.5048828125, -3876.13134765625,
       -12167.0, -5972.41455078125, -22273.107421875, 1971.1124267578125, -6552.8935546875, -9948.1005859375,
       323.2069396972656, -8585.1953125, 1006.041748046875, -3904.0537109375, -1081.2869873046875, -1304.62939453125,
       1383.2569580078125, -7543.36865234375, -9578.505859375, 1359.91796875, 6043.33837890625, -1651.7208251953125,
       5374.90625, -0.9665340185165405, 0.488459974527359, -0.12810169160366058, 0.024073729291558266,
       0.031113730743527412, -0.11624837666749954, -0.06859317421913147, -0.12862829864025116, -0.007544871885329485,
       -0.10369399935007095};
  std::vector<float> param_std_
      {0.00018597296730149537, 0.0003037697752006352, 0.00032244171597994864, 19.85418701171875, 0.00025319220731034875,
       0.0001879141927929595, 0.00020299396419432014, 14.679166793823242, 0.00036354546318762004,
       0.00010849659884115681, 0.0001454972953069955, 18.297916412353516, 587858.3125, 347658.96875, 269366.9375,
       267655.46875, 159342.765625, 150143.359375, 111209.4140625, 92208.15625, 115107.09375, 83358.2890625,
       88284.4140625, 71007.25, 69407.640625, 49621.6171875, 57226.7109375, 45344.75, 48214.96484375, 38291.3828125,
       44814.17578125, 48097.5390625, 36484.17578125, 28732.3515625, 31575.361328125, 35193.6875, 31333.89453125,
       25185.18359375, 24481.07421875, 27280.78515625, 24102.55859375, 20606.658203125, 19271.20703125, 19845.330078125,
       17353.833984375, 23361.45703125, 16269.423828125, 15819.6123046875, 14747.4658203125, 13779.529296875,
       13890.001953125, 13993.3642578125, 1.5067980289459229, 1.3883295059204102, 0.5375533103942871,
       0.5281885266304016, 0.19307351112365723, 0.23608607053756714, 0.2542172968387604, 0.35189706087112427,
       0.14615380764007568, 0.2410934865474701};
};

#endif
